● 1월 13일
- 인라인 일 경우는 transform 이 적용이 안된다.
- text-shadow 는 spread 값이 없다.
- a태그는 예외로 블록요소를 감쌀 수 있다.
- overflow:hidden 은 부모자격에 먹힌다. 포지션값이 있을때 


===============================================


● 1월 17일
- &amp; = & 특수기호

- 형제선택자 : +
예) div+div{} -> 앞에 형제 div가 있는 div선택
예) a+a{} -> 앞에 a가 있는 a선택
-> 첫번째를 제외한 나머지 형제요소들 선택시 많이 쓰여짐

-   삼각형만들기: 보더사용 
    border-bottom: 10px solid red;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
-> 보더 중첩이었을때의 특징이다.

- transform은 display값이 inline일때는 적용되지 않는다.

- transition 이랑 animation 동시사용하면 충돌 발생한다.

- 속성선택자: [속성명] 
    - 속성명의 특정값을 비교하는 4가지 방법
    1. [속성명=값] -> 정확히 일치하는 값
    2. [속성명*=값] -> 값 내용 중 있기만 하면 찾음
    4. [속성명^=값] -> 값 내용이 시작하는 문자열 찾음
    3. [속성명$=값] -> 값 내용이 끝나는 문자열 찾음
-> 사용하는 문자열에 문제가 없다면 따옴표를 쓰지 않아도 된다!
      (띄어쓰기, 특수문자 등 있다면 따옴표사용)

-   [ JS 출력하기 ]
     1. alert창 띄우기
     window.alert("나는 프론트엔드 개발자다!");
     2. 페이지 상단에 찍기
     document.write("좋겠다~!");
     3. 콘솔에 찍기
     console.log("그러냐?^^");

- 변수를 쓰는 이유는 재사용을 하기 위함이다.
  변수명은 호출시에 값이 나오고, 따옴표로 싸지 않고 띄어쓰기를 하지 않는다
  변수선언은 var, let, cont 키워드를 사용한다!

- JS에서 "="는 같다가 아니라 오른쪽의 값이 왼쪽에 들어감을 뜻한다
 예) innerHTML = 값

- JS에서 body는 특별히 취급해서 document.body 라고 선택함!

- [ 스타일시트를 변경하는 객체 : style ]
  하위속성은 모두 변수형으로 생성되어 있다
  2음절 이상 이름일 때 -를 지우고 대문자로 시작
  예) border-radius -> borderRadius



=================================================

● 1월 18일

- https://www.snig.digital/  : 크리스탈 재밌는 사이트

- 소리는 mp3, 영상은 mp4 가 표준

- muted가 되어있어야 영상이 로딩시 autoplay가 가능하다

- [ video 요소 - html5에서 지원하는 비디오 재생요소 ]
-> img 태그와 비슷하게 쉽게 비디오를 삽입하도록 등장!
((속성들))
1. src : 파일경로
2. controls : 동영상 제어버튼바
(이게 있으면 화면클릭으로 또는 스페이스바로 재생/멈춤 가능)
3. autoplay : 자동재생(소리없음에서 작동)
4. muted : 소리없음
5. loop : 무한반복재생
6. playsinline : 모바일 ios (아이폰) 동영상 재생시 자동재생 및 동영상이 페이지에 삽입된 상태에서 재생되도록 설정하는 옵션
(안드로이드는 없어도 자동재생 및 삽입재생됨!) 
7. poster : 비디오가 멈춤상태일때 첫화면 이미지
(값으로 이미지 경로만 쓰면 됨) 

- [ object-fit 속성 ]
-> img, video 요쇼에 사용하는 맞춤속성
 - 부모요소 크기를 채우는 방식을 결정함!
- contain 기본값
- 특히 이미지일 경우 배경이미지로 넣어야
 빈공간 없이 비율을 유지하면 채울 수 있다고
 생각하는데 이 속성을 사용하면 마치 배경이미지처럼
 이미지를 채우고 나가는 부분을 처리함
1. cover : 이미지나 동영상 비율유지하며 부모박스를 빈공간 없이 채움
(잘리는 부분이 있을 수 있음)
2. fill : 이미지나 동영상의 비율을 깨고 부모박스를 빈공간 없이 채움
(잘리는 부분이 없다)
3. contain : 이미지나 동영상이 모두 보이며 비율을 유지함
(잘리는 부분이 없으나 빈 공간 생김)

- [ object-position 속성 ]
- object-fit을 사용한 설정에서 위치를 이동할 때 사용
- 이미지나 동영상의 기준값을 변경 적용할 수 있다!
- 설정법:
object-position : 가로값 세로값;
1) 가로값 - left, center, right, 수치(px,% 등)
2) 세로값 - top, center, bottom, 수치(px,% 등)
-> 기본값은 가로값, 세로값 모두 center임!

- 필터의 명도를 조정하여 어두워보이게 함 : filter: brightness(50%);

- 용어체크:
1) 오버레이효과(overlay) - 어둡게처리
2) 트렌스페런트효과(transparent) - 밝게처리

- 자바스크립트는 가상요소를 컨트롤할 수 없다.

- [ JS의 이퀄의 의미 ]  
- 이퀄은 오른쪽값이 왼쪽에 할당됨을 의미!
(할당은 값이 특정 메모리공간에 들어감을 의미)  
-> 절대로 같다는 의미가 아님!!!

- [ JS에서 점(.)의 의미 ]
객체의 하위 메서드나 속성으로 들어감을 의미
객체는 목적을 가지고 만든 프로그램 단위체
메서드는 객체 내부에 만들어진 함수(코드저장소)
속성은 객체 내부의 특정값을 정의하는 항목
예) 우주.은하계.태양계.지구.대한민국.서울.강남구

- [ JS에서 코드의 마무리는 세미콜론;;;;;;; ]
JS의 코드 끝에는 세미콜론으로 마무리한다!
세미콜론이 안붙는 경우
1. 선언적함수(이름이 있는 함수)의 끝
2. 제어문의 끝(if문, for문,...)
 ((참고: 자동세미콜론 삽입기능))
ASI(Automatic Semicolon Insertion)
-> 브라우저가 세미콜론이 필요한 부분의 구문분석을 통하여 자동으로 넣어주는 기능!
-> 주의사항: 세미콜론을 안써도 되는 편리한 기능이지만
    자동구문분석에서 오류분석이 있을 수 있으므로
    개발자가 직접 세미콘론을 넣어주는 것을 추천함!!!

- [ JS에서 따옴표의 의미 ]
값을 의미! (string:문자데이터)
문자를 따옴표로 안싸면 그것은 변수라고 함!

- [ JS에서 요소를 선택하는 방법 ]
document 객체: html문서 전체를 담고 있는 DOM객체
DOM(Document Object Model) : 
웹문서에 있는 각 요소로 접근할 수 있는 방법을 제공하는 인터페이스다!

- [ JS 기본요소 선택법 ]
1. 아이디요소 선택법: getElementById() 메서드
document.getElementById(아이디명)
-> html 요소 중 아이디요소는 유일하므로 한번에 선택가능!
- 메서드 이름 분석
get -> 가져와라
Element -> 요소 하나를
By Id -> 아이디에 의한 것으로!

- [ CSS 선택자를 그대로 사용하는 선택법 ]
1. 하나의 요소 선택법
querySelector(CSS선택자)
-> 선택요소가 여러개여도 처음 만나는 하나의 요소를 선택함!
-> 이것은 몇번째라는 부가적인 선택이 불필요!!!
- 메서드 이름 분석
query 쿼리 -> 질의(기술적인 질문,요청)
Selector 선택자 -> CSS선택자
-> 브라우저에게 CSS 선택자로 질의를 한다! 그러면 결과로 요소를 선택한다!

 2. 여러개의 요소 선택법
querySelectorAll(CSS선택자)
-> 선택시 컬렉션 집합에 결과를 담는다!
-> 요소가 아나일 지라도 순번으로 선택한다!
(1) 순번선택법
.item(순번) 또는 [순번]
-> 순번은 0부터!
(2) 선택요소 개수 알아오기 : length
- 메서드 이름 분석
query 쿼리 -> 질의해!
Selector -> 선택자로
All -> 전부다 가져와!
-> 브라우저로 CSS선택자로 질의를 한다! 그러면 요소들을 선택한다!

-  querySelector(선택자)는 무조건 첫번째 만나는 하나만 선택한다.

- innerText = 값 -> 선택요소 내부에 글자 데이터 넣기



=====================================================

● 1월 19일

- [ select 요소 ]
지정된 값을 선택하는 입력요소
name 속성은 폼요소로 전송시 사용됨
하위필수요소 : option - 각 선택항목
옵션을 그룹화하는 요소 : optgroup
(참고:https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_optgroup)
유의사항 : 값을 선택할 경우 선택값은 option 요소의 속성인 value값을 읽어감!
단, value를 안쓸 수 있는데 이런 경우 내부 데이터값을 읽어간다
 /* 선택시(포커스갈때) 브라우저 기본 아웃라인 없애기 */
#sel:focus{
    outline: none;
}

- min() 함수를 사용하면 절대 값의 상한선을 두고
어떤 엘리먼트의 크기를 상대적으로 가져갈 수 있습니다.
min() CSS 함수는 2개 이상의 대소비교가 가능한 값이 주어졌을 때,
그 중에서 작은 값을 반환합니다.

- var 변수명 = "데이터값";
  변수선언 후 재할당시 var를 쓰지 않는다
  var = "A", "B", "C" ...
 변수를 한 번만 선언하고 한 꺼번에 할당할 수 있다

- [ JS의 코드 실행순서 ]
1. 위에서 아래로
2. 이퀄 오른쪽에서 왼쪽으로
3. 소괄호안에서 바깥으로
4. 함수 바깥부터 실행, 함수는 호출시 실행
  
- [ 템플릿 리터럴! ]
https://www.w3schools.com/js/js_string_templates.asp
-> 변수를 섞어쓸 문자 데이터를 따옴표를 안씀!
백틱(back-tics:`)으로 쌈  (백틱 내부에는 엔터가 자유롭다!)
-> 변수는 ${...}로 삽입한다!
${...} -> interpolation(보간법,내삽법)
-> 중괄호 사이에는 수식도 가능함!
 예) var home = "아름다운";
 "나의집" -> `나의 ${home} 집`


=====================================================

● 1월 20일

- /* 테이블 기본간극 없애기 */
    border-collapse: collapse;
기본값은 separate 인데, 확인하고 싶을때는
table태그에 border="1"을 넣어본다.

- [ 가장 복잡한 그룹요소인 테이블!!! ]
1. table : 테이블 전체 부모요소
2. tr : 테이블 레코드행 (table row)
3. td : 테이블 데이터요소 (table data)
4. th : 테이블 머릿부분에 사용될 경우 
td대신 th를 사용할 수 있다.
(기본디자인-중앙정렬+두꺼운글자)
________________________________  
(테이블 구조를 위한 추가요소들)
5. caption : 테이블 제목
6. thead : 테이블 머릿부분
7. tbody : 테이블 중앙 내용부분
8. tfoot : 테이블 하단부분
※tbody는 일반적으로 table tr td 로 구성하는
테이블일 경우 자동으로 생성되어 표시된다!

- [ 테이블 colspan 속성 ]
같은 tr의 td셀을 합칠때쓴다!
column 컬럼(기둥) + span(범위)
합칠 td의 개수만큼 숫자를 쓴다!

- [ 나머지 연산자: % ]
앞수%뒷수 -> 앞수에서 뒷수를 나눈 나머지
예) 숫자%2 -> 2로 나눈 나머지가 0이면 짝수




=====================================================

● 1월 25일


- 3. 비교연산자:
두 가지 값을 비교하여 true / false 의 결과값을 얻는 연산자
1) > : 크다(초과)
2) < : 작다(미만)
3) >= : 크거나 같다(이상)
4) <= : 작거나 같다(이하)
5) == : 같다(동등비교)
예) 1 == '1' -> true
6) != : 같지않다(동등비교)
7) === : 같다(동등비교-형까지비교)
예) 1 === '1' -> false 왜? 형이달라!
8) !== : 같지않다(동등비교-형까지비교)
※ 주의사항: 비교연산자의 결과로 반드시 true / false 가 나온다!


- 4. 대입연산자 : 기존값에 연산을 중첩시키는 연산자
1) += : 기존값에 더함
예) A += 5 와 같은 것은 A = A + 5
2) -= : 기존값에 뺌
예) A -= 5 와 같은 것은 A = A - 5
3) *= : 기존값에 곱함
예) A *= 5 와 같은 것은 A = A * 5
4) /= : 기존값에 나눔
예) A /= 5 와 같은 것은 A = A / 5
5) %= : 기존값에 더함
예) A %= 5 와 같은 것은 A = A % 5
※ 주의사항 : += 대입연산자는 붙여서 사용할것! (+ = 는 안됨)


5. 증감연산자 : 기존값에 1씩 더하거나 뺌
++ : 1씩증가,  -- : 1씩감소
 ______________________________
 ++ 이나 --를 변수 앞이나 뒤에 붙일 수 있다
변수 자신의 수를 증감할 경우엔 동일함!
다른변수에 할당 시 의미가 달라진다!
(1) ++을 뒤에 쓸 경우
앞변수 = 뒷변수++
 해석: 뒷변수를 먼저 앞변수에 할당한 후 뒷변수를 1증가한다!
(2) ++을 앞에 쓸 경우 앞변수 = ++뒷변수
해석: 뒷변수를 1증가 후 앞변수에 할당한다!
(--도 마찬가지임!!!)


- 6. 논리연산자 : true / false가 나오는 경우에 이를 조합하여 결과를 리턴하는 연산자
(1) 논리합(OR) -> || (바를 2개쓴다)
 - 여러조건 중 하나만 true 이면 true
(2) 논리곱(AND) -> && (엔퍼센드를 2개쓴다)
 - 여러조건 중 모두 true 이면 true
(3) 논리부정(NOT) -> ! (느낌표)
 - true 이면 false, false 이면 true


- 7. 조건연산자(삼항연산자)
if문과 유사하게 조건에 맞으면 실행할 수 있는 코드를 구분해 주는 연산자다!
-> 개발자들이 코드를 줄여쓸때 if문 대신에 많이 사용한다! 사랑한다!!!
________________________________
형식: 조건식 ? 실행문1 : 실행문2 ;
 -> 조건식이 true이면 실행문1을 실행하고
     조건식이 false이면 실행문2를 실행한다!
예) 비?집:놀이동산;
    -> 비가오면 집에 있고 안오면 놀이동산간다!
    -> 항목이 3개여서 삼항연산자라고도 함!

// 조건연산자는 출력자리에 바로 내용을 조건에 따라 출력가능하다!
예시)       var ans = "좋아";     
 // ans변수에는 대답할 생각이 담겨있다
document.write(`
<br> 아빠, 아이스크림 사줘! <br>
아빠왈 ${ans==="좋아"?"사줄게":"안돼!"}
 `);


- 비율유지박스 -> aspect-ratio 속성

- padding-top 값은 width값을 기준





=====================================================

● 1월 26일

- \n -> 역슬래쉬n은 엔터기호임!


- [ 숫자여부 판별 ]
-> is Not a Number? - isNaN()
-> 숫자가 아니니? 판별 내장함수는? isNaN(변수)
-> 숫자가 아니면 true, 숫자면 false
-> 데이터형이 String(문자)여도 내용이 숫자이면 숫자로 판별한다!



- 함수에서 아래쪽 코드가 실행되지 않도록 함수를 여기에서 빠져나가게 하는 방법은?
  return 키워드를 사용한다!!!
  리턴은 함수에서 어떤 값을 함수를 호출한 곳으로 가져가거나 함수를 끝낼 때 사용한다!
  return 어떤값 -> 리턴뒤에 값을 안쓸 수 있음



- value속성에 빈 문자값을 넣으면 기존내용 지워짐
예)  jumsu.value = "";



- [ switch case문 ]
단일조건을 분류하여 실행문을 만들어 줄때 사용하는 제어문
((구문구조))
____________________________________________
switch(변수){
	case 경우1: 실행코드; break;
	case 경우2: 실행코드; break;
	case 경우3: 실행코드; break;
	...
	default: 실행문;
}
_____________________________________________
((구문해석))
1. 변수값에 해당하는 경우 그 값에 해당하는 case에 들어가서 실행코드를 실행함
2. 각 case 끝에 break 예약어를 반드시 써야함!
-> 안쓰면 다른 case에 또 들어가는 경우가 생김!
-> 일반적으로 break 키워드는 제어문을 빠져나갈때 씀
3. default 는 if문의 else문과 비슷하여 해당 케이스가 없으면 이 부분이 실행됨
(단, 필요시에만 사용)
-> default문에는 break를 쓰지 않는다!



-  [ 비율유지박스 : aspect-ratio 속성사용 ]
aspect-ratio: 가로비 / 세로비;
-> width값은 셋팅하고 height값은 auto임!
-> 값을 하나만 쓰면 가로비만 세로를 1로볼때 설정됨!
예)
1:1비율
aspect-ratio: 1 / 1;
aspect-ratio: 1;

16:9비율
aspect-ratio: 16 / 9;

세로에 대한 가로 80%비율
aspect-ratio: .8;

세로에 대한 가로 200%비율
aspect-ratio: 2;




=====================================================

● 1월 27일



- [ 스프라이츠를 이용한 장면 넘기기 애니를 하려면? ]
1. 배경이미지 전체 길이를 알아야함
-> 이유: 이동셋팅시 가로이동일 경우에 전체길이값을 써야함!
(비율이 유지되는 이미지이므로 가로/세로중 한쪽값을 변경하면
 다른쪽값은 자동으로 변경된다!)
참고) 비례식사용
  가로 : 세로 = 1472px : 325px = x : 176px
  x = 1472*176/325 = 797.14
   전체가 8장면 이므로 한 장면당 100px(99.625px)로 정해짐
-> 더 편한 방법은 그림판에서 축소/확대를 사용하여 길이를 알아내면 된다!
    
2. 코딩법:
animation: 이름 시간 steps(장면개수) infinite;
-> 장면찍는 steps를 사용할때는 이징(가속도)불필요!
[ 여러줄 애니메이션 처리법 ]
배경이미지 이동을 x,y축으로 분리하여 셋팅함
-> 시간설정은 x축은 적당히 설정 후 y축은 x축 애니시간*줄수로 설정한다!
예) x축 애니를 2초로 설정 후 y축은 5줄이면 -> 2초*5줄=10초
1. x축이동 : steps(장면수)
   background-position-x : 값;
2. y축이동 : steps(줄수)
   background-position-y : 값;


- [ for문 ]
어떤 실행문을 순서대로 여러번 반복실행할 경우 사용하는 제어문
 ((구문구조))
________________________________________________
for(시;한;증){실행코드}
- 시 -> 시작값(변수선언과 함께 숫자할당)
- 한 -> 한계값(숫자를 조건문으로 사용)
- 증 -> 증감(1씩증가 ++ / 1씩감소 --)
 _________________________________________________
((구문해석))
1. 먼저 시작값을 변수에 선언 후 할당함
2. 중앙에 있는 한계값 조건에 맞는지 검사함
3. 맞으면(true) for문의 중괄호{}안의 코드를 실행함
4. 중괄호 안의 코드를 실행 후 세번째 증감으로 감
    ++ / -- 로 1씩 증감함
5. 중앙에 있는 한계값 조건에 맞는지 검사함
6. 조건에 맞는 동안 중괄호 안의 코드를 실행함
7. 중앙의 한계값 조건에 맞지 않으면(false) for문을 빠져나온다!


- [ while문 ]
반복실행코드를 위한 조건으로 만드는 제어문
((구문구조))
______________________________
시작값;
while(한계값){
      실행코드;
      증감;
}_____________________________
((구문해석))
- for문과 유사하나 시작값이 while문 윗쪽에 나옴
- 한계값은 while문 소괄호 안에 씀
- 증감은 while 실행코드 내부에 씀
 (주의: 증감을 안쓰면 무한루프에 빠짐!)
 - >>>>> while문과 for문은 무엇이 다른가?
시작값과 증감없이 단지 조건에 의해서
 반복실행이 필요한 경우 사용할 수 있다!
while(조건){코드}
-> 예) 중복숫자 피하기, 직전값 피하기 등


- defer 는 html코드를 모두 로딩후 실행하는 속성임


- [ JS 클래스 컨트롤 내장객체 ]
classList 객체
 -> 요소에 클래스를 넣거나 빼는 등 필요작업을 하는 객체\
(( 관련메서드 ))
1. add(클래스명) : 클래스추가
2. remove(클래스명) : 클래스제거
3. toggle(클래스명) : 클래스추가/제거
4. contains(클래스명) : 클래스있으면 true
5. replace(이전클래스명,변경클래스명)
   : 특정클래스를 다른 클래스로 변경
-> 클래스 추가/제거시 콤마로 구분하여 여러개의 클래스를 추가하거나 제거할 수 있다!
    예) 요소.classList.add("tt","cc","dd")
    예) 요소.classList.remove("bb","ee")





=====================================================

● 1월 30일


- html 파일내에서 script실행시에는 defer가 적용되지 않는다.

- [ DOM요소 로딩 후 실행구역 설정하기 ]
            
1. 왜 로딩구역 설정이 필요한가?
    - html의 body요소 구역보다 위의 스크립트 구역은 당연히 html 요소들보다 먼저 실행된다!
       따라서, html이 모두 로딩된 후 실행되도록 하는 이벤트 설정이 필요하다!

2. 로딩구역에 사용하는 이벤트

   1) load 이벤트
     - 선택된 요소 내부의 모든 컨텐츠가 로딩된 후 발생
       (이미지, 동영상 등 모두 불러온 후 발생함!)

   2) DOMContentLoaded 이벤트
      - 선택요소 내부의 모든 html태그만 로딩되면 발생

      -> DOMContentLoaded 이벤트가 load이벤트보다 실행속도가 빠름!

3. 로딩구역에 사용되는 내장함수(브라우저객체 메서드)

   1) addEventListener(이벤트명,함수)
       - 선택요소에 어떤 종류의 이벤트가 발생할 경우 함수를 실행하도록
        미리 셋팅해주는 기능
        add 더하다 Event 이벤트를 Listener 감시하는 것

        ex) window.addEventListener("click",함수이름)

    2) onload = 함수
       - 선택요소에 로드이벤트가 발생할 경우 함수를 실행함
       - 함수는 함수명만 쓰거나 익명함수를 할당한다!
        -> 같은 요소에 대하여 한 스크립트안에 한 번만 사용가능!
           ex) body.onload = 함수이름


대상 : window -> 창을 관할하는 최상위 객체
// -> 페이지 전체 로딩이벤트 설정시 많이 사용됨!
// window.addEventListener(이벤트명,함수)
// window.addEventListener("load",setEvt)
  window.addEventListener("DOMContentLoaded",setEvt)
// 익명함수로 직접 코드를 구현하기도 함!
// window.addEventListener("DOMContentLoaded",
// function(){구현코드})


===============================================


● 1월 31일

- 동적으로 움직이는 박스안에서 세로 중앙정렬 하고 싶을때는
감싸는 애를 display를 table로 하고 감싸고 있는애를 인라인 태그로 감싸고
css에서 table-cell로 디스플레이 바꾼 후 vertical-align을 middle값을 준다

- 


























