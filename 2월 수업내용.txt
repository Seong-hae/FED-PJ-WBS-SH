
===============================================


● 2월 1일

- 할당하고 난 후는 ;(세미콜론)이 꼭 붙는다!



===============================================


● 2월 2일


- [ 배열(Array) 변수란? ]
                - 여러개의 데이터를 묶음으로 변수 하나에 저장함
                - 장점: 데이터를 취급하고 다루는데 편의성 제공
                - 각 데이터를 하나의 이름으로 구분하여 호출할 수 있는 메모리공간이다!
                (예: 계란한판, 아파트 등)

                [ 배열의 선언 ]
                1. new Array()
                - new 키워드
                객체를 실제로 메모리안에 생성하는 방법을 제공
                이를 인스턴스(instance)라고 함!

                - 객체란 속성과 메서드를 가지고 있는 프로그램 단위체
                - 객체는 독립된 특성을 가지고 있어야 함!
                
                예컨대 자동차, 볼펜, 물통, 가방 등
                독립된 별도의 기능이 있어야하고 명사적 특징과 동사적 특징이
                모두 있어야 객체다!



- /******************************************** 
                [ 객체(Object) 란? ]

                - 일반적으로 JS에서 객체란 속성과 메서드를
                가지는 프로그램 단위체
                - 속성은 명사적 특징, 메서드는 동사적 특징
                객체예)
                https://www.w3schools.com/js/js_objects.asp
                - 자동차의 명사적특징: 핸들, 백미러, 트렁크, 바퀴 등
                - 자동차의 동사적특징: 운전하다, 멈추다, 주차하다 등

                (참고: 브라우저에 이미 만들어져 있는 객체들)
                -> 내장객체라고함!
                -> 브라우저 내장객체-> 봄(BOM:Browser Object Model)
                -> https://www.w3schools.com/js/js_window.asp

                window : 윈도우(브라우저화면) 표시 관련객체
                document : 문서구조에 관련된 객체
                Array : 배열객체
                Object : 객체를 만들기 위한 객체
                Date : 날짜객체
                Math : 수학객체
                ___________________________________

                ->>> 내장객체 중 객체를 만들기위한 객체인 Object를
                사용하여 객체를 만들어보자!

                [ 객체의 선언 ]
                - new Object()

                [ 객체의 할당 ]
                - 중괄호{}를 사용하여 할당코딩을 함
                - {속성명:값,속성명:값,...}
                - 여러값을 셋팅할때 콤마로 구분한다
                - 배열과 비교해서 이해하기 쉽고 호출하기 쉽다!
                - 객체 스타일로 데이터 구조를 만들고
                이런 파일로 DB와 데이터 통신을 한다!
                이 파일의 이름은? 제이슨(JSON:확장자.json)

                [ 객체의 호출 ]
                - 객체명[속성명]
                또는
                - 객체명.속성명

            ********************************************/

- /*************************************** 
                [ new 키워드 없이 바로 객체 생성하기 ] -> 추천방식!

                - 방법: 변수 선언 후 이퀄 뒤에 바로 중괄호 사용!
                예) let obj = {속성명:값,속성명:값,...};

                [ 객체의 속성 셋팅시 문자형 또는 변수형 사용하기 ]
                
                1. 문자형 속성 - 따옴표로 싸는 방법

                예) let obj = {"나는나":"호호호","너는너":"하하하"}
                -> 문자형 속성의 객체 호출시
                객체명[문자형속성명]
                예) obj["나는나"]

                2. 변수형 속성 - 따옴표로 안싸는 방법
                예) let obj = {name:"김수현",tall:"186cm"};
                -> 변수형 속성의 객체 호출시
                객체명.속성명
                예) obj.name

                또는

                객체명["속성명"]
                예) obj["name"]
                -> 반드시 변수형 속성명을 따옴표로 싸서
                문자형으로 표시해야함!
                obj[name] -> 에러남!

            ***************************************/


===============================================


● 2월 3일


-  변수는 바.렛.콘스트!!!

        [ var ] : 함수영역변수

        1. 함수영역에서 사용할 때만 지역변수
        2. 함수영역 바깥에서 사용하면 전역변수
        3. 전역변수와 같은 이름의 변수를 함수내에서 값을
            할당하면 덮어쓰기가 된다!
        4. 함수영역에서 전역변수와 같은 이름의 변수를
        선언하면 전역변수와 다른 지역변수로 관리된다!
        (이렇게 하면 코딩이 매우 혼란스러워 질 수 있다)
        또는 변수이름이 같은 이름이지만 지역변수로
        사용할 수 있다는 장점이 되기도 한다!

        ________________________________________


        (지역변수 : Local Variable)
        함수영역 내에 선언한 변수
        - 특징 : 다른 함수나 바깥(전역) 영역에서 지역변수를 참조할 수 없다! (사용불가능)

        (전역변수 : Globql Variable)
        함수 밖 영역에서 선언한 변수
        - 특징 : 어떤 함수에서도 전역변수를 참조할 수 있다!
        ->> 즉, 전역변수의 값도 변경할 수 있다!!!
        -> 전역변수는 공유하고자 하는 데이터를 저장할 때 사용함!

        ___________________________________________


        [ let ] : 블록영역변수 (중괄호는 모두 블록임!)

        1. let으로 변수를 선언하면 전역과 지역을 별도로 관리하여
           같은 이름의 변수도 별개의 변수로 인식함
        
        2. let 변수는 선언 후 아래쪽에서 사용해야만 한다!
        ->>> 변수 호이스팅 금지!!!
        (비교 : var는 위에서 호출하고 아래에서 선언할 수 있다
        -> 변수의 호이스팅!) -> hoist (끌어올리다...라는 뜻!)

        3. 같은 영역에서 같은 이름의 변수를 중복선언 불가!
        (비교 : var는 중복선언시 덮어씀 - 재선언가능)

        _______________________________________________________


        [ const ] : 상수(constant) -> 변하지 않는값

        1. 선언과 동시에 할당해야함!

        2. 한번 할당한 값은 변경불가!

        3. 배열과 객체, 함수를 상수로 만드는 경우가 많다!
        -> 변경불가는 각 배열형, 객체형, 함수형
        -> 변경가능은 각 배열값, 객체값, 함수전달값

        4. 기타의 특징은 let과 동일함!(블록단위변수)



- ※ 정리 :
            ________________________________

            배열값 설정
            const 변수명 = [값1,값2,...];
            _________________________________

            배열값 호출
            변수명[순번] -> 순번은 0부터
            _________________________________

            객체값 설정
            const 변수명 = {속성:값,속성:값,...}
            ___________________________________

            객체값 호출

            변수명[속성명]
            -> 속성명을 따옴표로 싼 문자형임
            (만약 변수형 속성명이어도 이렇게 부를땐
            따옴표로 반드시 싸야한다!)

            또는

            변수명.속성명
            -> 속성명이 반드시 변수형 이어야함!
            -> 속성명이 문자형이어도 변수형에 적합하면 이와같이 사용가능

            ____________________________________

            참고) 내장객체를 new키워드 없이 바로 할당하는
            방식을 리터럴방식이라고 부른다! 이 방식 추천함!
            예) let str = ""
                let arr = []
                let obj = {}

            비교) let str = new String();
                  let arr = new Array();
                  let obj = new Object();




===============================================


● 2월 6일

- 서버와 로컬의 루트가 같을 경우에는 절대상대경로를 많이 쓰지만
 다른 경우에 절대상대경로르 써버리면 서버에서는 경로가 달라져 보이지 않으므로
유의해서 사용해야 한다.

- max-width: 100%;
    /* 이미지크기 최대 100%의 의미는?
    -> 싸고 있는 박스가 이미지 크기보다 작아질 때 이미지
    가로크기는 100%로 자동전환된다!
    이미지를 박스에 무조건 보이게 할 경우 이것을 셋팅함! */

- 제어문과 선언적함수는 끝에 세미콜론(;)이 붙지 않는다!


===============================================


● 2월 7일

- form method(데이터 전송방식) 보통 post 으로 숨겨서 보낸다
 get 방식은 'url'(다 드러남) 이라고 생각하면 된다

- form 관련 설명은 도깨비 로그인 페이지에 써져있음.

- 아이콘을 꼭 클래스를 변경하지 않아도 font-weight로 on/off버전을 표현할 수 있다

- const qs = (x) => {return document.querySelectorAll(x)};
const qs = x => document.querySelector(x);
const qsa = x => document.querySelectorAll(x);
길게 써야하는 부분을 함수로 만들고
이것을 호출하여 리턴받는 함수기능을 활용한다!
위의 함수는 선택자객체를 컬렉션으로 만드는 코드를
리턴하여 실제 사용할 때 함수명을 아주 짧게 줄이게 해준다!




===============================================


● 2월 3일

- 100vw로 잡을 경우 DT에서 가로스크롤이 약간 생김.
이유는 스크롤바 트랙을 포함하기 때문임. 모바일에서는 스크롤바 트랙이 없기때문임
설정시 100%나 안주면 auto이므로 안줘도 되면 안주는게 좋다


===============================================


● 2월 9일

- 꽉찬화면을 쓰는 사이트일지라도 속박스를 써서 1920이나 2000 사이즈를 주는 게 좋다

- &nbsp; : 줄바꿈없는 공백


===============================================


● 2월 10일

-  [ JS 클래스 컨트롤 내장객체 ]
            classList 객체

            -> 요소에 클래스를 넣거나 빼는 등 필요작업을
            하는 객체

            ((관련메서드))
            1. add(클래스명) : 클래스추가
            2. remove(클래스명) : 클래스제거
            3. toggle(클래스명) : 클래스추가/제거
            4. contains(클래스명) : 클래스있으면 true
            5. replace(이전클래스명,변경클래스명)
                : 특정클래스를 다른 클래스로 변경

            -> 클래스 추가/제거시 콤마로 구분하여
            여러개의 클래스를 추가하거나 제거할 수 있다!
            예) 요소.classList.add("tt","cc","dd")
            예) 요소.classList.remove("bb","ee")


===============================================


● 2월 13일

- top값은 기본값이 auto이므로 애니메이션 하려면 top:0을 초기값 필요하다


===============================================


● 2월 14일

- 인라인은 transform이 먹지 않는다. 이미지만 제외하고

- transition 쓰는 경우에 값이 auto값이면 먹히지 않는다

- this는 화살표 함수에서 의미가 다르기때문에 사용시 주의해야한다.



===============================================


● 2월 15일


- 1. 이벤트 설정
(1) addEventListener(이벤트명,함수)
-> 같은요소에 같은 이벤트로 다중설정가능!
(2) 이벤트속성 = 함수
-> 같은요소에 같은 이벤트로 단일설정만 가능!

2. 이벤트 해제
(1) removeEventListener(이벤트명,함수)
-> 주의: 함수를 외부함수로 만들어야 해제가 가능하다!
(2) 이벤트속성 = ""; -> 빈 문자열값을 할당하여 지움




===============================================


● 2월 20일











































