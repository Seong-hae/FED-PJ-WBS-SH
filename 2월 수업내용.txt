
===============================================


● 2월 1일

- 할당하고 난 후는 ;(세미콜론)이 꼭 붙는다!



===============================================


● 2월 2일


- [ 배열(Array) 변수란? ]
                - 여러개의 데이터를 묶음으로 변수 하나에 저장함
                - 장점: 데이터를 취급하고 다루는데 편의성 제공
                - 각 데이터를 하나의 이름으로 구분하여 호출할 수 있는 메모리공간이다!
                (예: 계란한판, 아파트 등)

                [ 배열의 선언 ]
                1. new Array()
                - new 키워드
                객체를 실제로 메모리안에 생성하는 방법을 제공
                이를 인스턴스(instance)라고 함!

                - 객체란 속성과 메서드를 가지고 있는 프로그램 단위체
                - 객체는 독립된 특성을 가지고 있어야 함!
                
                예컨대 자동차, 볼펜, 물통, 가방 등
                독립된 별도의 기능이 있어야하고 명사적 특징과 동사적 특징이
                모두 있어야 객체다!



- /******************************************** 
                [ 객체(Object) 란? ]

                - 일반적으로 JS에서 객체란 속성과 메서드를
                가지는 프로그램 단위체
                - 속성은 명사적 특징, 메서드는 동사적 특징
                객체예)
                https://www.w3schools.com/js/js_objects.asp
                - 자동차의 명사적특징: 핸들, 백미러, 트렁크, 바퀴 등
                - 자동차의 동사적특징: 운전하다, 멈추다, 주차하다 등

                (참고: 브라우저에 이미 만들어져 있는 객체들)
                -> 내장객체라고함!
                -> 브라우저 내장객체-> 봄(BOM:Browser Object Model)
                -> https://www.w3schools.com/js/js_window.asp

                window : 윈도우(브라우저화면) 표시 관련객체
                document : 문서구조에 관련된 객체
                Array : 배열객체
                Object : 객체를 만들기 위한 객체
                Date : 날짜객체
                Math : 수학객체
                ___________________________________

                ->>> 내장객체 중 객체를 만들기위한 객체인 Object를
                사용하여 객체를 만들어보자!

                [ 객체의 선언 ]
                - new Object()

                [ 객체의 할당 ]
                - 중괄호{}를 사용하여 할당코딩을 함
                - {속성명:값,속성명:값,...}
                - 여러값을 셋팅할때 콤마로 구분한다
                - 배열과 비교해서 이해하기 쉽고 호출하기 쉽다!
                - 객체 스타일로 데이터 구조를 만들고
                이런 파일로 DB와 데이터 통신을 한다!
                이 파일의 이름은? 제이슨(JSON:확장자.json)

                [ 객체의 호출 ]
                - 객체명[속성명]
                또는
                - 객체명.속성명

            ********************************************/

- /*************************************** 
                [ new 키워드 없이 바로 객체 생성하기 ] -> 추천방식!

                - 방법: 변수 선언 후 이퀄 뒤에 바로 중괄호 사용!
                예) let obj = {속성명:값,속성명:값,...};

                [ 객체의 속성 셋팅시 문자형 또는 변수형 사용하기 ]
                
                1. 문자형 속성 - 따옴표로 싸는 방법

                예) let obj = {"나는나":"호호호","너는너":"하하하"}
                -> 문자형 속성의 객체 호출시
                객체명[문자형속성명]
                예) obj["나는나"]

                2. 변수형 속성 - 따옴표로 안싸는 방법
                예) let obj = {name:"김수현",tall:"186cm"};
                -> 변수형 속성의 객체 호출시
                객체명.속성명
                예) obj.name

                또는

                객체명["속성명"]
                예) obj["name"]
                -> 반드시 변수형 속성명을 따옴표로 싸서
                문자형으로 표시해야함!
                obj[name] -> 에러남!

            ***************************************/


- 


























